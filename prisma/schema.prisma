// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo do usuário (auditores)
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  documents     Document[]
  checklists    Checklist[]

  @@map("users")
}

// Modelo de documento
model Document {
  id          String   @id @default(uuid())
  fileName    String
  filePath    String
  fileType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  checklists  Checklist[]

  @@map("documents")
}

// Modelo de checklist
model Checklist {
  id          String   @id @default(uuid())
  standard    String   // Norma de referência (ISO 9001, PMBOK, etc)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  questions   Question[]
  nonConformities NonConformity[]

  @@map("checklists")
}

// Modelo de pergunta
model Question {
  id          String   @id @default(uuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  answer      Answer?
  nonConformity NonConformity?

  @@map("questions")
}

// Modelo de resposta
model Answer {
  id          String   @id @default(uuid())
  response    Boolean  // true = Sim, false = Não
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  questionId  String   @unique
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

// Modelo de não conformidade
model NonConformity {
  id          String   @id @default(uuid())
  description String?
  status      NonConformityStatus @default(OPEN)
  observation String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  questionId  String    @unique
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  correctiveActions CorrectiveAction[]

  @@map("non_conformities")
}

// Modelo de ação corretiva
model CorrectiveAction {
  id              String   @id @default(uuid())
  action          String
  createdAt       DateTime @default(now())

  // Relações
  nonConformityId String
  nonConformity   NonConformity @relation(fields: [nonConformityId], references: [id], onDelete: Cascade)

  @@map("corrective_actions")
}

// Enumerador para o status das não conformidades
enum NonConformityStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}